name: CI/CD Pipeline for AWS Lambda ETL

on:
  push:
    branches:
      - main  # Runs when changes are pushed to the main branch

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials  # Add this step
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Run Tests
        run: |
          export PYTHONPATH=src:$PYTHONPATH  # Add src to the Python path
          pytest tests/


  build:
    name: Package Lambda Function
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: pip install -r requirements.txt -t package/

      - name: Zip Lambda Function
        run: |
          cp src/lambda_function.py package/
          cd package && zip -r ../lambda_function.zip .

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lambda-package
          path: lambda_function.zip

  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: lambda-package
          path: .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws_access_key_id: ${{ secrets.ACCESS_KEY }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-east-2

      - name: Verify AWS Credentials
        run: |
          aws sts get-caller-identity  # Verifies if AWS credentials are configured correctly.

      - name: Create AWS Lambda Function (If Not Exists)
        run: |
          FUNCTION_EXISTS=$(aws lambda get-function --function-name MyETLFunction --query 'Configuration.FunctionName' --output text || echo "FunctionNotFound")
          if [[ "$FUNCTION_EXISTS" == "FunctionNotFound" ]]; then
            echo "Lambda function does not exist. Creating..."
            aws lambda create-function \
              --function-name MyETLFunction \
              --runtime python3.9 \
              --role arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_LAMBDA_ROLE \
              --handler lambda_function.lambda_handler \
              --timeout 30 \
              --memory-size 256 \
              --zip-file fileb://lambda_function.zip
          else
            echo "Lambda function exists. Proceeding to update."
          fi

      - name: Deploy Code to AWS Lambda
        run: |
          aws lambda update-function-code --function-name MyETLFunction --zip-file fileb://lambda_function.zip
